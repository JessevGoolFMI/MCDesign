@startuml
namespace CompressorStrategies {
    class CompressorFactory << (S,Aquamarine) >> {
        + CreateStrategy(identifier string) (Strategies.Strategy, error)

    }
    class CompressorV1 << (S,Aquamarine) >> {
        + Execute(value <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)

    }
    class CompressorV2 << (S,Aquamarine) >> {
        + Execute(value <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)

    }
    class CompressorV3 << (S,Aquamarine) >> {
        + Execute(value <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)

    }
    class CompressorV4 << (S,Aquamarine) >> {
        + Execute(value <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)

    }
}

"Strategies.StrategyFactory" <|-- "implements""CompressorStrategies.CompressorFactory"
"Strategies.Strategy" <|-- "implements""CompressorStrategies.CompressorV1"
"Strategies.Strategy" <|-- "implements""CompressorStrategies.CompressorV2"
"Strategies.Strategy" <|-- "implements""CompressorStrategies.CompressorV3"
"Strategies.Strategy" <|-- "implements""CompressorStrategies.CompressorV4"

namespace Strategies {
    interface Strategy  {
        + Execute(value <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)

    }
    interface StrategyFactory  {
        + CreateStrategy(identifier string) (Strategy, error)

    }
}

namespace TestDesign {
    class CompressorModule << (S,Aquamarine) >> {
        - specialValue <font color=blue>interface</font>{}
        - compressor Strategies.Strategy

        + Compress() (<font color=blue>interface</font>{}, error)
        + SetCompressorStrategy(strategy Strategies.Strategy) 

    }
    class DefaultModuleFactory << (S,Aquamarine) >> {
        + CreateModule(id string, controller IMediator) *Module
        + CreateCompressorModule(id string, controller IMediator, specialValue <font color=blue>interface</font>{}) *CompressorModule

    }
    interface ICommand  {
        + Execute(module *Module) error

    }
    interface IMediator  {
        + SendCommand(command ICommand, targetID string) 
        + GetModule(id string) *Module
        + Subscribe(subscriberID string, publisherID string, valueName string) 
        + Unsubscribe(subscriberID string, publisherID string, valueName string) 
        + NotifySubscribers(publisherID string, valueName string, value <font color=blue>interface</font>{}) 

    }
    interface IModuleFactory  {
        + CreateModule(id string, controller IMediator) *Module
        + CreateCompressorModule(id string, controller IMediator, specialValue <font color=blue>interface</font>{}) *CompressorModule

    }
    class MasterController << (S,Aquamarine) >> {
        - modules <font color=blue>map</font>[string]*Module
        - subscriptions <font color=blue>map</font>[string]<font color=blue>map</font>[string]bool
        - commandQueue <font color=blue>chan</font> commandWithTargetID
        - wg sync.WaitGroup
        - mu sync.Mutex

        - processCommands() 

        + GetModules() <font color=blue>map</font>[string]*Module
        + DisplaySubscriptions() 
        + Subscribe(subscriberID string, publisherID string, valueName string) 
        + Wait() 
        + Unsubscribe(subscriberID string, publisherID string, valueName string) 
        + NotifySubscribers(publisherID string, valueName string, value <font color=blue>interface</font>{}) 
        + RegisterModule(module <font color=blue>interface</font>{}) error
        + UnregisterModule(moduleId string) error
        + SendCommand(command ICommand, targetID string) 
        + GetModule(id string) *Module

    }
    class Module << (S,Aquamarine) >> {
        - id string
        - notifier NotificationCallback
        - state State
        - stopChan <font color=blue>chan</font> byte

        + Mediator IMediator

        - startBackgroundProcess() 
        - resolveErrorAndResume() 

        + GetId() string
        + GetState() State
        + SetState(state State) 
        + TransitionToRunning() 
        + ResolveError() 
        + StopBackgroundProcess() 
        + NotifySubscriber(valueName string, value <font color=blue>interface</font>{}) 
        + SetNotificationCallback(callback NotificationCallback) 
        + SubscribeToTopic(topic string, target string) 
        + UnsubscribeFromTopic(topic string, target string) 
        + PublishToTopic(topic string, value <font color=blue>interface</font>{}) 

    }
    class PublishValueCommand << (S,Aquamarine) >> {
        - publisherID string
        - topic string
        - value <font color=blue>interface</font>{}

        + Execute(module *Module) error

    }
    class SubscribeCommand << (S,Aquamarine) >> {
        - subscriberID string
        - publisherID string
        - topic string

        + Execute(module *Module) error
        + GetTargetID() string

    }
    class TestDesign.NotificationCallback << (T, #FF7700) >>  {
    }
    class TestDesign.State << (T, #FF7700) >>  {
    }
    class UnsubscribeCommand << (S,Aquamarine) >> {
        - subscriberID string
        - publisherID string
        - topic string

        + Execute(module *Module) error

    }
    class commandWithTargetID << (S,Aquamarine) >> {
        - command ICommand
        - targetID string

    }
}
"TestDesign.Module" *-- "extends""TestDesign.CompressorModule"

"TestDesign.IModuleFactory" <|-- "implements""TestDesign.DefaultModuleFactory"
"TestDesign.IMediator" <|-- "implements""TestDesign.MasterController"
"TestDesign.ICommand" <|-- "implements""TestDesign.PublishValueCommand"
"TestDesign.ICommand" <|-- "implements""TestDesign.SubscribeCommand"
"TestDesign.ICommand" <|-- "implements""TestDesign.UnsubscribeCommand"

"TestDesign.Module""uses" o-- "TestDesign.IMediator"

"TestDesign.<font color=blue>func</font>(string, <font color=blue>interface</font>{}) " #.. "alias of""TestDesign.NotificationCallback"
"__builtin__.int" #.. "alias of""TestDesign.State"
@enduml
